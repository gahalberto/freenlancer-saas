generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]

  @@map("roles")
}

model Synagogue {
  id      Int    @id @default(autoincrement())
  name    String
  address String
  users   User[]

  @@map("synagogues")
}

model User {
  id               String                @id @default(uuid())
  name             String
  email            String                @unique
  phone            String?
  password         String
  synagogueId      Int?
  roleId           Int
  isAdminPreview   Boolean?              @default(false)
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  status           Boolean               @default(true)
  jewishName       String?
  asweredQuestions Boolean?              @default(false)
  questionarioId   Int                   @default(0)
  isFixed          Boolean?              @default(false)
  storeId          String?
  credits          Int                   @default(0)
  address_neighbor String                @default("")
  address_number   String                @default("")
  address_state    String                @default("")
  address_street   String                @default("")
  address_zicode   String                @default("")
  address_city     String                @default("")
  address_lat      String?
  address_lng      String?
  pixKey           String?               @default("")
  deleteAt         DateTime?
  Certifications   Certifications[]
  EventsServices   EventsServices[]
  mashguiachJobs   FixedJobs[]
  StoreEvents      StoreEvents[]
  transactions     Transaction[]
  questionarios    MashguiachQuestions[]
  role             Role                  @relation(fields: [roleId], references: [id])
  synagogue        Synagogue?            @relation(fields: [synagogueId], references: [id])
  TimeEntries      TimeEntries[]

  @@map("users")
}

enum TYPE_ENTRIES {
  ENTRADA
  SAIDA
}

model TimeEntries {
  id        Int          @id @default(autoincrement())
  user_id   String
  store_id  String
  type      TYPE_ENTRIES
  data_hora DateTime
  latitude  Float?
  longitude Float?

  user   User   @relation(fields: [user_id], references: [id])
  stores Stores @relation(fields: [store_id], references: [id])

  @@map("time_entries")
}

model Transaction {
  id        String            @id @default(uuid())
  userId    String
  amount    Int
  credits   Int
  createdAt DateTime          @default(now())
  status    TransactionStatus
  sessionId String?           @unique
  user      User              @relation(fields: [userId], references: [id])
}

model MashguiachQuestions {
  id                Int     @id @default(autoincrement())
  userId            String
  jewishName        String
  maritalStatus     Int
  weddingLocation   String?
  wifeName          String?
  rabbiMarried      String?
  rabbi             String?
  currentSynagogue  String?
  shiur             String?
  daven             Int
  jewishStudies     String?
  kashrutBooks      String?
  kashrutCourses    String?
  ashgachotWorked   String?
  kashrutLevel      Int
  shomerShabat      Boolean
  childrenSchool    String?
  wifeCoveredHair   Int?
  montherSingleName String?
  giurInFamily      String?
  rabbiOfGiur       String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("mashguiach_questions")
}

model Course {
  id              String            @id @default(uuid())
  title           String
  description     String
  instructor      String
  imageUrl        String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  lessonCount     Int?
  modules         Module[]
  moduleOrders    ModuleOrder[]
  studentProgress StudentProgress[]
}

model Module {
  id              String            @id @default(uuid())
  title           String
  courseId        String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  orderN          Int?
  lessons         Lesson[]
  LessonOrder     LessonOrder[]
  course          Course            @relation(fields: [courseId], references: [id])
  ModuleOrder     ModuleOrder[]
  studentProgress StudentProgress[]
}

model Lesson {
  id              String            @id @default(uuid())
  title           String
  contentUrl      String?
  moduleId        String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  textContent     String?
  courseId        String?
  module          Module            @relation(fields: [moduleId], references: [id])
  LessonOrder     LessonOrder?
  quiz            Quiz?
  studentProgress StudentProgress[]
}

model Quiz {
  id        String   @id @default(uuid())
  lessonId  String   @unique
  questions Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
}

model StudentProgress {
  id        String   @id @default(uuid())
  studentId String
  courseId  String
  moduleId  String?
  lessonId  String?
  progress  Int
  score     Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id])
  lesson    Lesson?  @relation(fields: [lessonId], references: [id])
  module    Module?  @relation(fields: [moduleId], references: [id])
}

model ModuleOrder {
  id       String @id @default(uuid())
  courseId String
  moduleId String
  order    Int
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  module   Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)
}

model LessonOrder {
  id       String @id @default(uuid())
  moduleId String
  lessonId String @unique
  order    Int
  lesson   Lesson @relation(fields: [lessonId], references: [id])
  module   Module @relation(fields: [moduleId], references: [id])

  @@unique([moduleId, order])
}

model Stores {
  id               String           @id @default(uuid())
  title            String
  userId           String?
  isMashguiach     Boolean?
  mashguiachId     String?
  storeTypeId      String
  isAutomated      Boolean?
  address_zipcode  String
  address_street   String
  address_number   String
  address_neighbor String
  address_city     String
  address_state    String
  comercialPhone   String           @default("")
  phone            String           @default("")
  imageUrl         String?          @default("")
  menuUrl          String?          @default("")
  Certifications   Certifications[]
  times_entries    TimeEntries[] // Defina como um array para refletir a relação one-to-many
  reports          Reports[]
  StoreEvents      StoreEvents[]
  storeType        StoresType       @relation(fields: [storeTypeId], references: [id])
  fixedJobs        FixedJobs[]
}

model Certifications {
  id                 String             @id @default(uuid())
  storeId            String
  userId             String
  description        String
  observation        String?
  kasherLePessach    Boolean            @default(false)
  HashgachotType     HashgachotTypeEnum
  issueDate          DateTime
  validationDate     DateTime
  createdAt          DateTime           @default(now())
  englishDescription String?
  store              Stores             @relation(fields: [storeId], references: [id])
  user               User               @relation(fields: [userId], references: [id])
}

model StoresType {
  id     String   @id @default(uuid())
  title  String
  stores Stores[]
}

model StoreEvents {
  id                   String           @id @default(uuid())
  title                String
  ownerId              String
  responsable          String?
  date                 DateTime
  deletedAt            DateTime? // Campo opcional
  createdAt            DateTime         @default(now())
  updatedAt            DateTime?        @updatedAt
  nrPax                Int
  clientName           String
  eventType            String
  serviceType          String
  isApproved           Boolean          @default(false)
  storeId              String           @default("")
  responsableTelephone String?
  address_city         String           @default("")
  address_neighbor     String           @default("")
  address_number       String           @default("")
  address_state        String           @default("")
  address_street       String           @default("")
  address_zicode       String           @default("")
  menuUrl              String?          @default("")
  EventsServices       EventsServices[]
  eventOwner           User             @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  store                Stores           @relation(fields: [storeId], references: [id])
  EventsAdresses       EventsAdresses[]
}

model EventsAdresses {
  id               String      @id @default(uuid())
  storeEventId     String
  workType         WORKTYPE
  address_zipcode  String
  address_street   String
  address_number   String
  address_neighbor String
  address_city     String
  address_state    String
  eventAddress     StoreEvents @relation(fields: [storeEventId], references: [id])
}

enum WORKTYPE {
  PRODUCAO
  EVENTO
}

model EventsServices {
  id                      String            @id @default(uuid())
  StoreEventsId           String
  arriveMashguiachTime    DateTime
  endMashguiachTime       DateTime
  isApproved              Boolean           @default(false)
  mashguiachId            String?
  mashguiachPrice         Float             @default(0)
  observationText         String?
  accepted                Boolean           @default(false)
  responseDate            DateTime?
  StoreId                 String            @default("")
  paymentStatus           TransactionStatus @default(Pending)
  reallyMashguiachArrive  DateTime?
  reallyMashguiachEndTime DateTime?
  latitude                Float?
  longitude               Float?
  mashguiachPricePerHour  Float             @default(0)
  transport_price         Float?            @default(0)
  address_zipcode         String?
  address_street          String?
  address_number          String?
  address_neighbor        String?
  address_city            String?
  address_state           String?
  StoreEvents             StoreEvents       @relation(fields: [StoreEventsId], references: [id])
  Mashguiach              User?             @relation(fields: [mashguiachId], references: [id])
  workType                WORKTYPE?
}

model FixedJobs {
  id              String    @id @default(uuid())
  store_id        String
  price           Int?
  price_per_hour  Float
  user_id         String
  timeIn          DateTime?
  timeOut         DateTime?
  observationText String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?

  WorkSchedule WorkSchedule[]
  mashguiach   User           @relation(fields: [user_id], references: [id])
  store        Stores         @relation(fields: [store_id], references: [id])
}

model WorkSchedule {
  id         String  @id @default(uuid())
  fixedJobId String
  dayOfWeek  String // "Sunday", "Monday", etc.
  timeIn     String? // "08:00", null se folga
  timeOut    String? // "17:00", null se folga
  isDayOff   Boolean @default(false) // Se é um dia de folga normal
  sundayOff  Int? // Exemplo: 1 significa que o funcionário folga no 1º domingo do mês

  fixedJob FixedJobs @relation(fields: [fixedJobId], references: [id], onDelete: Cascade)
}

model Notification {
  id          Int      @id @default(autoincrement())
  message     String
  createdAt   DateTime @default(now())
  userId      String?
  read        Boolean  @default(false)
  redirectUrl String?
  readBy      String[] @default([])
  icon        String?  @default("cilPlus")
}

model Reports {
  id          Int     @id @default(autoincrement())
  title       String
  description String
  storeId     String
  imageUrl    String?
  Stores      Stores  @relation(fields: [storeId], references: [id])
}

model CreditsTranscition {
  id          Int               @id @default(autoincrement())
  user1       String
  user2       String?
  status      TransactionStatus
  amount      Int
  description Json
  createdAt   DateTime          @default(now())
  serviceId   String?
  updateAt    DateTime          @updatedAt
}

enum TransactionStatus {
  Success
  Failed
  Pending
}

enum HashgachotTypeEnum {
  CHALAVI
  BASSARI
  PARVE
}

enum DaysOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model NotificationToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
